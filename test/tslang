proc := |
    func proc

func := fc iden ( flist ) -> type { body }

body := |
    stmt body

stmt :=    | 
    expr ; |
    defvar ; |
    if expr : stmt |
    if expr : stmt ifnot : stmt |
    loop expr : stmt |
    for iden, iden <- expr : stmt |
    return expr ; |
    { body }

defvar := iden : type |
          iden : type = expr

epxr := |
    expr[ expr ]        | 
    expr ? expr : expr  |
    expr + expr         |
    expr - expr         |
    expr * expr         |
    expr / expr         |
    expr > expr         |
    expr < expr         |
    expr == expr        |
    expr >= expr        |
    expr <= expr        |
    expr or expr        |
    expr and expr       |
    not expr            |
    + expr              |
    - expr              |
    iden                |
    iden = expr         |
    iden( clist )       |
    number              |

flist := |
    iden : type , flist |
    iden : type

clist := |
    epxr , clist |
    epxr

type := |
    numeric
    array
    none

iden := [a-zA-Z_][a-zA-Z_0-9]*

number := [0-9]+ 

comment := #[^\n]\n